--p418 따라하기 : 자료의 병합
SELECT * FROM TEST_PART1;
SELECT * FROM TEST_PART2;

SELECT CUSTOMER FROM TEST_PART1 
UNION 
SELECT CUSTOMER FROM TEST_PART2;  --고객ID 만 출력 (A 서브쿼리)

SELECT CUSTOMER, SUM(SALES) SALES1
FROM TEST_PART1
GROUP BY CUSTOMER;  --1판매장의 고객별 판매수량 (B 서브쿼리)

SELECT CUSTOMER, SUM(SALES) SALES2  
FROM TEST_PART2
GROUP BY CUSTOMER;  --2판매장의 고객별 판매수량 (C 서브쿼리)

--책의 첫 번째 방법
SELECT A.CUSTOMER, B.SALES1, C.SALES2
FROM
  ( SELECT CUSTOMER FROM TEST_PART1 
    UNION 
    SELECT CUSTOMER FROM TEST_PART2 )  A,  --고객ID 만 출력 (A 서브쿼리)
  ( SELECT CUSTOMER, SUM(SALES) SALES1 
    FROM TEST_PART1
    GROUP BY CUSTOMER ) B,  --1판매장의 고객별 판매수량 (B 서브쿼리)
  ( SELECT CUSTOMER, SUM(SALES) SALES2  
    FROM TEST_PART2
    GROUP BY CUSTOMER ) C  --2판매장의 고객별 판매수량 (C 서브쿼리)
WHERE A.CUSTOMER =  B.CUSTOMER (+)  -- A 서브쿼리의 모든 고객이 나오도록 Outer조인
   AND  A.CUSTOMER =  C.CUSTOMER (+) ;


--책의 두 번째 방법 : 생략


--자체 풀이 (1) : Union All 후 그룹화
SELECT CUSTOMER, 
       SUM( ( CASE WHEN SITE = 'A' THEN SALES ELSE 0 END ) ) SALES1,
       SUM( ( CASE WHEN SITE = 'B' THEN SALES ELSE 0 END ) ) SALES2
FROM 
( SELECT 'A' SITE, CDATE, CUSTOMER, SALES FROM TEST_PART1
UNION ALL
SELECT 'B' SITE, CDATE, CUSTOMER, SALES  FROM TEST_PART2 )
GROUP BY CUSTOMER
ORDER BY CUSTOMER;

--자체 풀이 (2) : 그룹화 후 Union All 
SELECT CUSTOMER, 
       ( CASE WHEN SITE = 'A' THEN 판매량 END ) AS SALES1,
       ( CASE WHEN SITE = 'B' THEN 판매량 END ) AS SALES2
FROM 
 ( ( SELECT 'A' SITE, CUSTOMER, SUM(SALES) AS 판매량 
     FROM TEST_PART1 
     GROUP BY 'A' , CUSTOMER  ) 
  UNION ALL
  ( SELECT 'B' SITE, CUSTOMER, SUM(SALES)  AS 판매량 
    FROM TEST_PART1 
    GROUP BY 'B' , CUSTOMER  ) )    
     -- FROM 절 안에서 반드시 (   ( ) UNION ALL ( )  ) : 괄호로 한번 더 감싸기!
ORDER BY CUSTOMER;



--자체 풀이 (3) : Full Outer Join
SELECT A.CUSTOMER AS "A사업장 고객ID", A.A_SALES AS "A사업장 매출", 
       B.CUSTOMER AS "B사업장 고객ID", B.B_SALES AS "B사업장 매출"
FROM 
( SELECT CUSTOMER, SUM(SALES) AS A_SALES
FROM TEST_PART1
GROUP BY CUSTOMER ) A
FULL OUTER JOIN
( SELECT CUSTOMER, SUM(SALES) AS B_SALES
FROM TEST_PART2
GROUP BY CUSTOMER ) B 
ON A.CUSTOMER = B.CUSTOMER;


SELECT ( CASE WHEN A.CUSTOMER = B.CUSTOMER THEN A.CUSTOMER
                    WHEN A.CUSTOMER IS NULL THEN B.CUSTOMER
                    WHEN B.CUSTOMER IS NULL THEN A.CUSTOMER END ) AS 고객ID,
          A.A_SALES AS "A사업장 매출", 
          B.B_SALES AS "B사업장 매출"
FROM 
( SELECT CUSTOMER, SUM(SALES) AS A_SALES
FROM TEST_PART1
GROUP BY CUSTOMER ) A
FULL OUTER JOIN
( SELECT CUSTOMER, SUM(SALES) AS B_SALES
FROM TEST_PART2
GROUP BY CUSTOMER ) B 
ON A.CUSTOMER = B.CUSTOMER
ORDER BY 고객ID;



--p424 문제 19-1 자료의 병합
--자체 풀이 : 거래 일시까지 출력해 봄
SELECT A.CDATE AS 판매일자, A.CUSTOMER, A.A AS "A사업장 판매량", B.B AS "B사업장 판매량"
FROM ( SELECT CDATE, CUSTOMER, SUM(SALES) AS A
    FROM TEST_PART1
    GROUP BY CDATE, CUSTOMER ) A, 
    ( SELECT CDATE, CUSTOMER, SUM(SALES) AS B
    FROM TEST_PART2
    GROUP BY CDATE, CUSTOMER ) B
WHERE A.CDATE = B.CDATE AND A.CUSTOMER = B.CUSTOMER 
ORDER BY 판매일자;

-- 책의 풀이 : 책의 첫 번째 방법에서 A 서브쿼리의 UNION 을 INTERSACT (공통부분) 로 바꾸기만 하면 됨!
--            두 테이블에 공통으로 있는 고객만 추려냄, 거래일시는 달라도 상관없음
SELECT A.CUSTOMER, B.SALES1, C.SALES2
FROM
  ( SELECT CUSTOMER FROM TEST_PART1 
    INTERSECT 
    SELECT CUSTOMER FROM TEST_PART2 )  A,  --고객ID 만 출력 (A 서브쿼리)
  ( SELECT CUSTOMER, SUM(SALES) SALES1 
    FROM TEST_PART1
    GROUP BY CUSTOMER ) B,  --1판매장의 고객별 판매수량 (B 서브쿼리)
  ( SELECT CUSTOMER, SUM(SALES) SALES2  
    FROM TEST_PART2
    GROUP BY CUSTOMER ) C  --2판매장의 고객별 판매수량 (C 서브쿼리)
WHERE A.CUSTOMER =  B.CUSTOMER (+)  -- A 서브쿼리의 모든 고객이 나오도록 Outer조인
   AND  A.CUSTOMER =  C.CUSTOMER (+) ;